import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { errorLog, isFunc, isObject, scrollAnimationInit, createArray, isString, stringContains } from "./helpers";
var nameSpace = 'ScrollObserver';

var state = function state(visible, alreadyFired) {
  this.visible = false;
  this.alreadyFired = false;
};

var setClassName = function setClassName(options) {
  var toggle = _objectSpread({
    element: null,
    className: null
  }, options);

  if (!toggle.element) {
    errorLog(nameSpace, "Be sure to set a const toggleElement = (reactRef.current or document.querySelector) in the new ".concat(nameSpace, "({ toggle: { element: toggleElement } })"));
  }

  if (!toggle.className) {
    errorLog(nameSpace, "Be sure to set the className you want to toggle in the new ".concat(nameSpace, "({ toggle: { className: \"my-class\" } })"));
  }

  this.add = function () {
    !toggle.element.classList.contains(toggle.className) && toggle.element.classList.add(toggle.className);
  };

  this.remove = function () {
    toggle.element.classList.contains(toggle.className) && toggle.element.classList.remove(toggle.className);
  };

  this.update = function (setState) {
    if (!setState.alreadyFired && setState.visible) {
      this.add();
    }

    if (setState.alreadyFired && !setState.visible) {
      this.remove();
    }
  };
};

var setTween = function setTween(options) {
  var gsap = _objectSpread({
    timeline: null,
    yoyo: false,
    speed: 1,
    reverseSpeed: 1,
    delay: 2
  }, options);

  if (!gsap.timeline) {
    errorLog(nameSpace, "Be sure to set a const tl = gsap.timeline({ paused: true }) in the new ".concat(nameSpace, "({ gsap: { timeline: tl } })"));
  }

  var tl = gsap.timeline;

  if (gsap.yoyo) {
    tl.repeat(-1).yoyo(gsap.yoyo).repeatDelay(gsap.delay);
  }

  this.play = function () {
    tl.timeScale(gsap.speed).play();
  };

  this.pause = function () {
    tl.pause();
  };

  this.reverse = function () {
    tl.timeScale(gsap.reverseSpeed).reverse();
  };

  this.kill = function () {
    if (tl) {
      tl.pause(0);
      tl.kill();
    }
  };

  this.update = function (setState) {
    if (!setState.alreadyFired && setState.visible) {
      this.play();
    }

    if (setState.alreadyFired && !setState.visible) {
      gsap.yoyo ? this.pause() : this.reverse();
    }
  };

  this.scrub = function (intersectionRatio) {
    tl.progress(intersectionRatio);
  };
};

var setPlayer = function setPlayer(options) {
  var video = _objectSpread({
    element: null,
    playingClassName: null,
    pausedClassName: null
  }, options);

  if (!video.element) {
    errorLog(nameSpace, "Be sure to set a video element in the new ".concat(nameSpace, "({ video: { element: videoRef.current } })"));
  }

  function handlePlay() {
    if (video.element.src) {
      video.element.play();
      video.playingClassName && video.element.classList.add(video.playingClassName);
      video.pausedClassName && video.element.classList.remove(video.pausedClassName);
    }
  }

  function handlePause() {
    if (video.element.src) {
      video.element.pause();
      video.pausedClassName && video.element.classList.add(video.pausedClassName);
      video.playingClassName && video.element.classList.remove(video.playingClassName);
    }
  }

  function tryPlay() {
    try {
      handlePlay();
    } catch (error) {
      handlePause();
    }
  }

  function tryPause() {
    try {
      handlePause();
    } catch (error) {}
  }

  this.play = function () {
    tryPlay();
  };

  this.pause = function () {
    tryPause();
  };

  this.kill = function () {
    tryPause();
  };

  this.update = function (setState) {
    if (!setState.alreadyFired && setState.visible) {
      this.play();
    }

    if (setState.alreadyFired && !setState.visible) {
      this.pause();
    }
  };
};

var setFunction = function setFunction(options) {
  var callback = _objectSpread({
    active: null,
    notActive: null
  }, options);

  if (!callback.active && !callback.notActive) {
    errorLog(nameSpace, "Be sure to set a callback active or notActive function in the new ".concat(nameSpace, "({ callback: { active: () => () } })"));
  }

  if (callback.active && !isFunc(callback.active) || callback.notActive && !isFunc(callback.notActive)) {
    errorLog(nameSpace, "Be sure to set the callback as a function ");
  }

  this.update = function (setState) {
    if (!setState.alreadyFired && setState.visible && callback.active) {
      callback.active();
    }

    if (setState.alreadyFired && !setState.visible && callback.notActive) {
      callback.notActive();
    }
  };
};

var ScrollObserver = function ScrollObserver(_ref) {
  var breakpoints = _ref.breakpoints,
      callback = _ref.callback,
      destroyImmediately = _ref.destroyImmediately,
      gsap = _ref.gsap,
      observer = _ref.observer,
      offset = _ref.offset,
      whenVisible = _ref.whenVisible,
      thresholds = _ref.thresholds,
      toggle = _ref.toggle,
      triggerElement = _ref.triggerElement,
      useDuration = _ref.useDuration,
      video = _ref.video;

  if (!triggerElement) {
    errorLog(nameSpace, 'Be sure to set a const triggerElement = (reactRef.current or document.querySelector) in the new ScrollScene({ triggerElement: triggerElement })');
  }

  var $this = this;
  var setToggle;
  var setGsap;
  var setVideo;
  var setCallback;
  var ratio;
  var setRootMargin = '0% 0%';
  var setState = new state(false, false);

  if (typeof offset === 'number') {
    setRootMargin = "-".concat(Math.abs(offset), "px 0%");
  } else if (typeof offset === 'string') {
    setRootMargin = "-".concat(Math.abs(parseFloat(offset)), "% 0%");
  }

  if (toggle && isObject(toggle)) {
    setToggle = new setClassName(toggle);
  }

  if (gsap && isObject(gsap)) {
    setGsap = new setTween(gsap);
  }

  if (video && isObject(video)) {
    setVideo = new setPlayer(video);
  }

  if (callback && isObject(callback)) {
    setCallback = new setFunction(callback);
  }

  var observerCallback = function observerCallback(entries) {
    entries.forEach(function (_ref2) {
      var isIntersecting = _ref2.isIntersecting,
          intersectionRatio = _ref2.intersectionRatio;

      if (ratio) {
        setState.visible = intersectionRatio >= ratio;
      } else if (isIntersecting && !setState.visible) {
        setState.visible = true;
      } else if (!isIntersecting && setState.visible) {
        setState.visible = false;
      }

      setToggle && setToggle.update(setState);
      setGsap && (!useDuration ? setGsap.update(setState) : setGsap.scrub(intersectionRatio));
      setVideo && setVideo.update(setState);
      setCallback && setCallback.update(setState);

      if (!setState.alreadyFired && setState.visible) {
        setState.alreadyFired = true;
      }

      if (setState.alreadyFired && !setState.visible) {
        setState.alreadyFired = false;
      }

      if (isIntersecting && destroyImmediately) {
        $this.destroy();
      }
    });
  };

  var getPercentage = function getPercentage(value) {
    if (!isString(whenVisible) && !stringContains(whenVisible, '%')) {
      errorLog(nameSpace, 'Be sure to set a percentage as a string. { whenVisible: "50%" }');
    }

    var parsed = parseInt(value.replace('%', '')) / 100;
    ratio = parsed;
    return parsed;
  };

  var getThresolds = function getThresolds() {
    var defaults = {
      one: [0, 1],
      gsap: createArray(199)
    };
    var returnedThresholds = defaults.one;

    if (whenVisible) {
      returnedThresholds = getPercentage(whenVisible);
    }

    if (useDuration) {
      returnedThresholds = defaults.gsap;
    }

    if (thresholds) {
      returnedThresholds = createArray(thresholds);
    }

    return returnedThresholds;
  };

  var Observer = new IntersectionObserver(observerCallback, _objectSpread({
    threshold: getThresolds(),
    rootMargin: setRootMargin
  }, observer));

  this.init = function () {
    Observer.observe(triggerElement);
  };

  this.destroy = function () {
    if (triggerElement && Observer) {
      if (setToggle) {
        setToggle.remove();
      }

      if (setGsap) {
        setGsap.kill();
      }

      if (setVideo) {
        setVideo.kill();
      }

      Observer.unobserve(triggerElement);
    }
  };

  scrollAnimationInit(breakpoints, this.init, this.destroy);
};

export { ScrollObserver };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,